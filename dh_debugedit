#!/usr/bin/perl -w

=head1 NAME

dh_debugedit - edit paths to debug source files

=cut

use strict;
use Cwd ();
use File::Find;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_debugedit> [S<I<debhelper options>>]

=head1 DESCRIPTION

B<dh_debugedit> is a debhelper program that uses debugedit to extract source
information from ELF binaries and rewrite source paths. This allows source to
be included with debug packages in /usr/src/debug.

=cut

init();

my $debugedit = cross_command("debugedit");

# Get the source path
my $srcdir = ".";
$srcdir = $dh{SOURCEDIR} if defined $dh{SOURCEDIR};
$srcdir = Cwd::abs_path($srcdir);

print "Source: ", $srcdir, "\n";

# Parent of the source directory
my $basedir = dirname($srcdir);

print "Base: ", $basedir, "\n";

# Destination to rewrite the base path into
my $destdir = "/usr/src/debug";

# List of source files to copy to destdir
my $filelist = $srcdir . "/debian/debugedit.list";
unlink($filelist) if -e $filelist;

# Borrowed from dh_strip
sub get_file_type {
  my $file = shift;
  open(FILE, "-|")
    || exec("file", $file)
    || die "can't exec file: $!";
  my $type = <FILE>;
  close FILE;
  return $type;
}

sub editfile {
  # Skip links and directories
  return if -l $_ or -d $_;

  my $file = $File::Find::name;
  print "File: ", $_, " Path: ", $file, "\n";

  my $type = get_file_type($_);
  print "Type: ", $type, "\n";

  if ($type =~ m/.*ELF.*, not stripped.*/) {
    print "Editing: ", $_, "\n";
    doit($debugedit, "-b", $basedir, "-d", $destdir, "-l", $filelist, $_);
  }
}

foreach my $package (@{$dh{DOPACKAGES}}) {
  my $tmp=tmpdir($package);

  print "Package: ", $package, " Directory: ", $tmp, "\n";

  find(\&editfile, $tmp);
}

=head1 SEE ALSO

L<debhelper(7)>

This program is part of debhelper.

=head1 AUTHOR

Jason Conti <jason.conti@gmail.com>

=cut
