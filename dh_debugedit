#!/usr/bin/perl -w

=head1 NAME

dh_debugedit - edit paths to debug source files

=cut

use strict;
use Cwd ();
use File::Find;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_debugedit> [S<I<debhelper options>>] [B<--dbg-package=>I<package>]

=head1 DESCRIPTION

B<dh_debugedit> is a debhelper program that uses debugedit to extract source
information from ELF binaries and rewrite source paths. This allows source to
be included with debug packages in /usr/src/debug.

=cut

init();

my $debugedit = cross_command("debugedit");

# Get the source path
my $srcdir = ".";
$srcdir = $dh{SOURCEDIR} if defined $dh{SOURCEDIR};
$srcdir = Cwd::abs_path($srcdir);

# Name of the source directory
my $srcname = basename($srcdir);

# Parent of the source directory
my $basedir = dirname($srcdir);

# Destination to rewrite the base path into
my $destdir = "/usr/src/debug";

# List of source files to copy to destdir
my $filelist = $srcdir . "/debian/debugedit.list";
unlink($filelist) if -e $filelist;

# Borrowed from dh_strip
sub get_file_type {
  my $file = shift;
  open(FILE, "-|")
    || exec("file", $file)
    || die "can't exec file: $!";
  my $type = <FILE>;
  close FILE;
  return $type;
}

# Check the file type and run debugedit if it is an unstripped ELF binary
sub editfile {
  # Skip links and directories
  return if -l $_ or -d $_;

  my $type = get_file_type($_);

  if ($type =~ m/.*ELF.*, not stripped.*/) {
    doit($debugedit, "-b", $basedir, "-d", $destdir, "-l", $filelist, $_);
  }
}

# Rewrite the source directory in each ELF binary and save the source filenames
# in $filelist
foreach my $package (@{$dh{DOPACKAGES}}) {
  my $tmp = tmpdir($package);

  find(\&editfile, $tmp);
}

# Get the path to copy the source files to
my $debugtmp="";
if (ref $dh{DEBUGPACKAGES}) {
  my $debugpackage = @{$dh{DEBUGPACKAGES}}[0];
  if (! grep { $_ eq $debugpackage } getpackages()) {
    error("debug package $debugpackage not listed in control file");
  }
  $debugtmp = tmpdir($debugpackage);
}

# No place to copy to, so we are done
else {
  exit 0;
}

# Install source files to a path like debian/package-dbg/usr/src/debug/package-name/
my $debugsrcdir = $debugtmp.$destdir."/$srcname/";

# Copy the source files to the debug tmp

# debugedit writes nul terminated lines to $filelist, translate these to newline
complex_doit("sort -z -u $filelist | tr '\\0' '\\n' > $filelist.out");
doit("mv $filelist.out $filelist");

open(FILE, "<", "$filelist") || die "failed to open $filelist: $!";

while (my $line = <FILE>) {
  chomp $line;
  $line =~ s/$srcname\/?//;
  if ($line ne "" and ! -d $line) {
    my $filename = basename($line);
    my $filepath = dirname($line);
    my $installpath = $filepath eq $line ? $debugsrcdir : $debugsrcdir.$filepath;
    
    doit("install", "-d", $installpath) unless -e $installpath;
    doit("install", "-m", "644", $line, $installpath."/$filename");
  }
}

close FILE;

=head1 SEE ALSO

L<debhelper(7)>

This program is part of debhelper.

=head1 AUTHOR

Jason Conti <jason.conti@gmail.com>

=cut
